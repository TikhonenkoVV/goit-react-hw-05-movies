{"version":3,"file":"static/js/736.3c6cd5a5.chunk.js","mappings":"oOAEaA,EAAYC,EAAAA,EAAAA,GAAH,mEACT,qBAAGC,MAAkBC,OAAOC,KAA5B,IAIAC,EAAWJ,EAAAA,EAAAA,GAAH,qIAGL,mBAAoC,EAApC,EAAGC,MAAkBI,QAAQC,IAA7B,IAGHC,EAAcP,EAAAA,EAAAA,GAAH,sVAMX,qBAAGC,MAAkBC,OAAOC,KAA5B,IACW,qBAAGF,MAAkBC,OAAOM,MAA5B,IAWXC,EAAYT,EAAAA,EAAAA,IAAH,uH,2DCvBTU,EAAO,WAChB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,IAAjC,eAAOK,EAAP,KAAaC,EAAb,KAmBA,OAhBAC,EAAAA,EAAAA,YAAU,WACDT,IACLI,GAAa,IACbM,EAAAA,EAAAA,IAAiBV,EAAS,YACrBW,MAAK,SAAAC,GACFJ,EAAQI,EAAKL,KAChB,IACAM,OAAM,SAAAC,GACHR,EAASQ,EAAIC,UACbC,EAAAA,EAAAA,IAAMF,EAAIC,QACb,IACAE,SAAQ,WACLb,GAAa,EAChB,IACR,GAAE,CAACJ,KAGA,gCACKG,IAAa,SAACe,EAAA,EAAD,IACbX,EAAKY,OAAS,IACX,iCACI,SAAC/B,EAAD,oBACA,SAACK,EAAD,iBACKc,QADL,IACKA,OADL,EACKA,EAAMa,KACH,gBAAGC,EAAH,EAAGA,UAAWC,EAAd,EAAcA,aAAcC,EAA5B,EAA4BA,KAAMC,EAAlC,EAAkCA,UAAlC,OACI,UAAC5B,EAAD,YACI,SAACE,EAAD,CACI2B,IACIH,EA9BhB,mCA+BwCA,EAClBI,EAEVC,IAAI,OAER,wBACI,uBAAIJ,OAER,uBAAIC,MAZUH,EADtB,SAoBfd,EAAKY,OAAS,IACX,SAAC/B,EAAD,oDAEHiB,IAAS,SAAC,KAAD,MAGrB,C,gFC/DYuB,E,QAAWvC,EAAAA,IAAH,sO,SCCR6B,EAAS,WAClB,OACI,SAACU,EAAD,WACI,SAAC,KAAD,CACIC,OAAO,MACPC,MAAM,MACNC,MAAM,UACNC,aAAc,CACVC,SAAU,WACVC,IAAK,MACLC,KAAM,MACNC,UAAW,yBAEfC,aAAa,GACbC,SAAS,EACTC,UAAU,yBACVC,iBAAiB,GACjBC,iBAAiB,GACjBC,kBAAkB,MAIjC,C,mJCvBDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAEHC,EAAU,mCAAG,sGACCF,EAAAA,EAAAA,IAAA,qCAAwCC,IADzC,uBACdhC,EADc,EACdA,KADc,kBAEfA,GAFe,2CAAH,qDAKVkC,EAAgB,mCAAG,WAAOC,EAAGC,GAAV,yFACLL,EAAAA,EAAAA,IAAA,+BACKC,EADL,iBACqBI,EADrB,kBACmCD,IAF9B,uBACpBnC,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,wDAOhBF,EAAgB,mCAAG,WAAOV,EAASiD,GAAhB,yFACLN,EAAAA,EAAAA,IAAA,gBACV3C,GADU,OACAiD,EADA,oBACmBL,IAFd,uBACpBhC,EADoB,EACpBA,KADoB,kBAIrBA,GAJqB,2CAAH,uD","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","components/Loader/Loader.styled.jsx","components/Loader/Loader.jsx","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastTitle = styled.h2`\n    color: ${({ theme }) => theme.colors.white};\n    margin-bottom: 20px;\n`;\n\nexport const CastGrid = styled.ul`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n    grid-gap: ${({ theme }) => theme.spacing.step * 5}px;\n`;\n\nexport const CastElement = styled.li`\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    padding-bottom: 10px;\n    align-items: center;\n    color: ${({ theme }) => theme.colors.white};\n    background-color: ${({ theme }) => theme.colors.accent};\n    & p {\n        padding: 0 5px;\n        line-height: 1.3;\n        text-align: center;\n    }\n    & p:last-child {\n        margin-top: auto;\n    }\n`;\n\nexport const CastPhoto = styled.img`\n    width: 100%;\n    object-fit: cover;\n    object-position: top;\n    aspect-ratio: 3 / 4;\n`;\n","import { useParams } from 'react-router-dom';\nimport { CastElement, CastGrid, CastPhoto, CastTitle } from './Cast.styled';\nimport { useEffect, useState } from 'react';\nimport { gethMovieDetails } from 'services/api';\nimport { Loader } from 'components/Loader/Loader';\nimport noPoster from '../../images/no-poster.jpg';\nimport { ToastContainer, toast } from 'react-toastify';\n\nexport const Cast = () => {\n    const { movieId } = useParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState([]);\n    const [cast, setCast] = useState([]);\n    const IMAGES_BASE_URL = 'https://image.tmdb.org/t/p/w500/';\n\n    useEffect(() => {\n        if (!movieId) return;\n        setIsLoading(true);\n        gethMovieDetails(movieId, '/credits')\n            .then(data => {\n                setCast(data.cast);\n            })\n            .catch(err => {\n                setError(err.message);\n                toast(err.message);\n            })\n            .finally(() => {\n                setIsLoading(false);\n            });\n    }, [movieId]);\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {cast.length > 0 && (\n                <>\n                    <CastTitle>Cast</CastTitle>\n                    <CastGrid>\n                        {cast?.map(\n                            ({ credit_id, profile_path, name, character }) => (\n                                <CastElement key={credit_id}>\n                                    <CastPhoto\n                                        src={\n                                            profile_path\n                                                ? IMAGES_BASE_URL + profile_path\n                                                : noPoster\n                                        }\n                                        alt=\"_\"\n                                    />\n                                    <p>\n                                        <b>{name}</b>\n                                    </p>\n                                    <p>{character}</p>\n                                </CastElement>\n                            )\n                        )}\n                    </CastGrid>\n                </>\n            )}\n            {cast.length < 1 && (\n                <CastTitle>Sorry, no cast information available.</CastTitle>\n            )}\n            {error && <ToastContainer />}\n        </>\n    );\n};\n","import styled from '@emotion/styled';\n\nexport const Backdrop = styled.div`\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    opacity: 1;\n    background-color: #00000080;\n    transition: opacity 250ms, visibility 250ms;\n    z-index: 100;\n`;\n","import { ThreeCircles } from 'react-loader-spinner';\nimport { Backdrop } from './Loader.styled';\n\nexport const Loader = () => {\n    return (\n        <Backdrop>\n            <ThreeCircles\n                height=\"100\"\n                width=\"100\"\n                color=\"#369daf\"\n                wrapperStyle={{\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%, -50%)',\n                }}\n                wrapperClass=\"\"\n                visible={true}\n                ariaLabel=\"three-circles-rotating\"\n                outerCircleColor=\"\"\n                innerCircleColor=\"\"\n                middleCircleColor=\"\"\n            />\n        </Backdrop>\n    );\n};\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '49f12b338a85dcd14c7e661f8eadc77e';\n\nexport const gethMovies = async () => {\n    const { data } = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n    return data;\n};\n\nexport const gethMoviesByName = async (q, page) => {\n    const { data } = await axios.get(\n        `search/movie?api_key=${API_KEY}&page=${page}&query=${q}`\n    );\n    return data;\n};\n\nexport const gethMovieDetails = async (movieId, details) => {\n    const { data } = await axios.get(\n        `movie/${movieId}${details}?api_key=${API_KEY}`\n    );\n    return data;\n};\n"],"names":["CastTitle","styled","theme","colors","white","CastGrid","spacing","step","CastElement","accent","CastPhoto","Cast","movieId","useParams","useState","isLoading","setIsLoading","error","setError","cast","setCast","useEffect","gethMovieDetails","then","data","catch","err","message","toast","finally","Loader","length","map","credit_id","profile_path","name","character","src","noPoster","alt","Backdrop","height","width","color","wrapperStyle","position","top","left","transform","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","axios","API_KEY","gethMovies","gethMoviesByName","q","page","details"],"sourceRoot":""}